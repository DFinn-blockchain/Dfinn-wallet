export const en = {
  common: {
    welcomeBack: 'Welcome back!',
    welcomeSafe: 'Welcome to the safest Crypto Wallet',
    enterPinToUnlock: 'Enter PIN to unlock',
    addOrConnectAccount: 'Add / connect account',
    createNewWalletAccount: 'Create a new account',
    importExistingWallet: 'Import an existing account',
    firstScreenNotification: 'By continuing, you agree to our Terms and Privacy Policy',
    createWalletName: 'Create a new account',
    createWalletNotification: 'Your wallet name will only be used locally in this application. You can edit it later.',
    importPrivateKey: 'Import private key',
    selectSendingMethod: 'Select send method',
    youDonotHaveAnyAcc: (accountType: string) =>
      `You don't have any ${accountType} accounts to connect. Please create a new one`,
    noAvailableAccount: 'No available account',
    connectYourAccount: 'Connect your account',
    secretPhrase: 'Secret phrase',
    privateKey: 'Private key',
    jsonFile: 'JSON file',
    singleChain: 'Single chain',
    crossChain: 'Cross chain (XCM)',
    charityDonate: 'Charity donation',
    selectYourImport: 'Select import method',
    autoLock: 'Auto-lock',
    transferSuccessMessage: 'Your request has been confirmed. You can track its progress on the History page.',
    transferFailMessage1: 'There was a problem with your request. You can track its progress on the History page.',
    transferFailMessage2: 'There was a problem with your request.',
    selectQrCodeFromGallery: 'Select Qr Code from Gallery',
    notify: 'Notification!',
    cannotScanQRCodeWithoutPermission: 'Please grant Camera access to scan QR code',
    goToSetting: 'Go to setting',
    scan: 'Scan',
    undo: 'Undo',
    toSendFund: 'to send fund',
    toSendAsset: 'to send asset',
    emptyTransactionListMessage: 'Your transactions will appear here',
    emptyCrowdloanListMessage: 'Your crowdloan projects will appear here',
    emptyBrowserMessage: 'Type a URL or search the web',
    emptyBrowserTabsMessage: 'Your browsing tabs will appear here',
    copyToClipboard: 'Copy to clipboard',
    copiedToClipboard: 'Copied',
    continue: 'Continue',
    verifySecretPhraseMessage:
      'Fill in the words in the correct order to prove that you have saved your secret phrase.',
    firstScreenMessagePart1: 'By continuing, you agree to',
    firstScreenMessagePart2: 'our Terms & Conditions and Privacy Policy',
    termAndConditions: 'Terms & Conditions',
    and: ' and ',
    privacyPolicy: 'Privacy Policy',
    network: 'Network',
    account: 'Account',
    sendFromAddress: 'Send from address',
    sendToAddress: 'Send to address',
    networkFee: 'Network fee',
    password: 'Password',
    backToHome: 'Back to home',
    resend: 'Resend',
    cancel: 'Cancel',
    pinCode: 'PIN code',
    newPinCode: 'New PIN code',
    repeatPinCode: 'Repeat PIN code',
    done: 'Done',
    accountName: 'Account name',
    accountAddress: 'Account address',
    passwordForThisAccount: 'Password for this account',
    importAccount: 'Import account',
    remove: 'Remove',
    walletPassword: 'Wallet password',
    repeatWalletPassword: 'Repeat wallet password',
    tapToRevealPrivateKey: 'Tap to reveal your private key',
    viewPrivateKeyTitle: 'Make sure no one is watching your screen',
    walletName: 'Wallet name',
    explorer: 'Explorer',
    share: 'Share',
    faceId: 'Face ID / Touch ID',
    changeYourPinCode: 'Change your PIN code',
    manageDAppAccess: 'Manage dApp access',
    appLock: 'App lock',
    viewInExplorer: 'View in explorer',
    viewHistory: 'View history',
    finish: 'Finish',
    send: 'Send',
    ok: 'OK',
    reloadBackground: 'Reload background',
    status: 'Status: ',
    url: 'URL: ',
    version: 'Version: ',
    subscribing: '................... Subscribing .................',
    importJsonFile: 'Import from Polkadot.js',
    importJsonDescription: 'Please upload the .json file you exported from Polkadot.js',
    replaceJsonFile: 'Upload other to replace file',
    sendMessage: 'Send message',
    allAccounts: 'All accounts',
    inputFileLabel: 'Paste your JSON file',
    message: 'Message',
    input: 'Input',
    max: 'Max',
    fee: 'Fee:',
    transferable: 'Transferable: ',
    receiveModalText: 'Scan address to receive payment',
    importSecretPhraseTitle: 'Restore an existing wallet account with your 12 or 24-word secret recovery phrase',
    comingSoon: 'Coming soon',
    win: 'Win',
    fail: 'Fail',
    active: 'Active',
    search: 'Search',
    searchPlaceholder: 'Search or enter website',
    apply: 'Apply',
    anErrorHasOccurred: 'An error has occurred.',
    chooseAccount: 'Choose the account(s) youâ€™d like to connect',
    connect: 'Connect',
    favorites: 'Favorites',
    history: 'History',
    openInBrowser: 'Open in browser',
    removeFromFavourites: 'Remove from favourites',
    addToFavourites: 'Add to favourites',
    searchAtDuckDuckGo: 'Search at DuckDuckGo',
    searchResult: 'Search result',
    seeAll: 'See all',
    historyEmptyListPlaceholder: 'Your history will appear here',
    favouritesEmptyListPlaceholder: 'Your favourites will appear here',
    approve: 'Approve',
    metadataIsOutOfDate: 'Your metadata is out of date',
    selectAll: 'Select all',
    symbol: 'Symbol',
    decimals: 'Decimals',
    defaultReceiveAccountName: 'Received account / Contract address',
    info: 'Info',
    hexData: 'Hex data',
    detail: 'Detail',
    data: 'Data',
    method: 'Method',
    arguments: 'Arguments',
    amount: 'Amount',
    estimateGas: 'Estimate gas',
    sign: 'Sign',
    rawData: 'Raw data',
    signMethod: 'Sign method',
    from: 'From',
    genesis: 'Genesis',
    versionLabel: 'Version',
    nonce: 'Nonce',
    tip: 'Tip',
    lifetime: 'Lifetime',
    bytes: 'Bytes',
    immortal: 'immortal',
    immortalValidFrom: 'mortal, valid from',
    to: 'to',
    close: 'Close',
    viewDetail: 'View Detail',
    on: 'on',
    approveRequestTitle: 'You are approving a request with account',
    block: 'Block',
    unblock: 'Unblock',
    forgetAll: 'Forget all',
    disconnectAll: 'Disconnect all',
    connectAll: 'Connect all',
    forgetSite: 'Forget site',
    noDAppAvailable: 'No dApp available',
    noAccountAvailableForThisDApp: 'No account available for this dApp',
    received: 'Received',
    confirm: 'Confirm',
    viewTransaction: 'View transaction',
    transferNFTSuccessfullyMessage:
      'Your transfer request has been confirmed. It might take a minute to see changes in your wallet.',
    transferNFTFailedMessage: 'There was a problem with your request. You can try again.',
    address: 'address',
    toImportNFT: 'to import NFT',
    toImportToken: 'to import token',
    toSendNFT: 'to send NFT',
    approveRequestMessage: 'Only approve this request if you trust the app',
    approveTransactionMessage: 'You are approving a request send transaction',
    reject: 'Reject',
    sortBy: 'Sort by',
    closeAll: 'Close all',
    enterYourPrivateKey: 'Enter your private key',
    tokenType: 'Token type',
    save: 'Save',
    addToken: 'Add token',
    edit: 'Edit',
    importTokenSuccessMessage: 'Your changes are saved successfully',
    deleteToken: 'Delete token',
    importToken: 'Import token',
    emptyChainListMessage: 'Your chain will appear here',
    emptyTokenListMessage: 'Your token will appear here',
    customNetwork: 'Custom network',
    manageTokenList: 'Manage token list',
    enterYourPassword: 'Enter your password',
    noChainAvailable: 'No chain available',
    addNftSuccess: 'Successfully added a NFT collection',
    activeStaking: 'Active staking',
    total: 'Total',
    chooseAction: 'Choose action',
    useDeviceHaveGooglePlayStore: 'Please use a device with Google Play Store installed to continue using this app.',
    pleaseUpdateAndroidSystemWebView: 'Please update Android System Webview to continue using this app.',
    validator: 'Validator',
    collator: 'Collator',
    dApp: 'dApp',
    cancelTask: 'Cancel task',
    type: ' type',
    transferNotSupportedForNetwork: 'Transfer is not supported for this network.',
    importAlreadyAccount: 'Import an existing account',
    attachAccount: 'Attach account',
    autoConnectDAppAfterCreating: 'Auto connect dApps after creating',
    scanFromHardwareWallet: 'Scan your address from Hardware Wallet',
    scanFromWallet: 'Scan your address from wallet',
    scanAddress: 'Scan address',
    providerErrorMessagePart1: 'Your current providers for ',
    providerErrorMessagePart2: ' have been disconnected. Please change provider to continue',
    goToNetworkConfig: 'Go to network config',
    substrateAccount: 'Substrate account',
    evmAccount: 'EVM account',
    crowdloanStatus: 'Crowdloan status',
    parachain: 'Parachain',
    allParachains: 'All parachains',
    allProjects: 'All projects',
    polkadotParachain: 'Polkadot Parachain',
    kusamaParachain: 'Kusama Parachain',
    submitting: 'Submitting...',
    sending: 'Sending...',
    scanForApprove: "Use your device's camera to scan the QR code\ndisplayed on your hardware wallet",
    scanQr: 'Scan QR',
    back: 'Back',
    useHardWalletToScan: "Use your hardware wallet's camera\nto scan this QR code",
    useNormalWalletScan: 'Scan this QR code with your wallet',
    scanQrPayload: "Use this device's camera to scan the QR code\ndisplayed on the other wallet",
    startOver: 'Start Over',
    scanSignatureToSignTransaction: 'Scan this QR code with your other wallet\nto sign transaction',
    scanSignatureToSignMessage: 'Scan this QR code with your other wallet\nto sign message',
    viewDetails: 'View details',
    unsupportedToken: 'Unsupported token',
    sender: 'Sender',
    recipient: 'Recipient',
    originChain: 'Origin chain',
    destinationChain: 'Destination chain',
    viewOnExplorer: 'View on explorer',
    delete: 'Delete',
    currentPassword: 'Current password',
  },
  title: {
    accountDetails: 'Account details',
    yourSeedPhrase: 'Your seed phrase',
    verifyRecoveryPhrase: 'Verify recovery phrase',
    nameYourWallet: 'Name your wallet',
    sendFund: 'Send fund',
    sendAsset: 'Send asset',
    security: 'Security',
    selectAccount: 'Select account',
    selectAccountType: 'Select account type',
    settings: 'Settings',
    language: 'Language',
    accounts: 'Accounts',
    editAccount: 'Edit account',
    exportAccount: 'Export account',
    exportJson: 'Export JSON',
    importEVMPrivateKey: 'Import EVM private key',
    importByPrivateKey: 'Import by private key',
    importSecretPhrase: 'Import secret phrase',
    importBySecretPhrase: 'Import by secret phrase',
    network: 'Network',
    networks: 'Networks',
    removeAccount: 'Remove account',
    importFromJson: 'Import by JSON file',
    selectToken: 'Select token',
    exportPrivateKey: 'Export private key',
    selectNetwork: 'Select network',
    chain: 'Chain',
    token: 'Token',
    history: 'History',
    qrScanner: 'QR scanner',
    selectUnit: 'Select unit',
    filters: 'Filters',
    importNft: 'Import NFT',
    nftCollections: 'Your collectibles',
    nftList: 'NFT list',
    nftDetail: 'NFT detail',
    transferNft: 'Transfer NFT',
    authorizeTransaction: 'Authorize transaction',
    metadataTitlePart1: 'Approving this update will sync your metadata for the',
    metadataTitlePart2: 'chain from',
    authorizeRequestTitle: 'Approve request',
    phishingDetected: 'Phishing detected',
    requestToSignMessage: 'Request to sign message',
    requestToSendPayload: 'Request to send payload',
    manageDAppAccess: 'Manage dApp access',
    moreOptions: 'More options',
    scanQrCode: 'Scan QR code',
    transferNFTSuccessfully: 'Transfer NFT successfully',
    transferNFTFailed: 'Transfer NFT failed',
    sendTransaction: 'Send transaction',
    staking: 'Staking',
    stakingDetail: 'Staking details',
    stakingNetwork: 'Select a network',
    validators: 'Select a validator',
    collators: 'Select a collator',
    dApps: 'Select a dApp',
    configureToken: 'Configure token',
    importToken: 'Import token',
    validatorDetail: 'Validator detail',
    stakeAction: 'Stake',
    unStakeAction: 'Unstake',
    withdrawStakeAction: 'Withdraw',
    claimStakeAction: 'Claim reward',
    compoundStakeAction: 'Compound',
    receiveAsset: 'Receive asset',
    chainSelect: 'Chain select',
    importByQrCode: 'Import by QR code',
    createCompoundTask: 'Create task',
    cancelCompoundTask: 'Cancel task',
    addProvider: 'Add provider',
    attachAccount: 'Attach account',
    attachReadonlyAccount: 'Attach watch-only account',
    attachQRSignerAccount: 'Attach QR signer account',
    connectLedgerDevice: 'Connect Ledger device',
    scanAddress: 'Scan address',
    qrSigner: 'Address QR signer',
    readonlyAccount: 'Attach watch-only account',
    addAccount: 'Add account',
    createNewAccount: 'Create new account',
    importAccount: 'Import account',
    scanApproveRequest: 'Scan Approve Request',
    approveRequest: 'Approve Request',
    signTransaction: 'Sign transaction',
    exportQrSigner: 'Export QR signer',
    scanPayload: 'Scan QR',
    signMessage: 'Sign Message',
    authorizeMessage: 'Authorize message',
    serviceSelect: 'Select service',
    customization: 'Customization',
    login: 'Login',
  },
  tabName: {
    crypto: 'Crypto',
    nft: 'NFT',
    crowdloans: 'Crowdloans',
    staking: 'Staking',
    browser: 'Browser',
  },
  cryptoScreen: {
    receive: 'Receive',
    send: 'Send',
    swap: 'Swap',
    buy: 'Buy',
    showZeroBalance: 'Show zero balance',
  },
  buttonTitles: {
    unlock: 'Unlock',
    unblock: 'Unblock',
    doNotRememberYourPassword: 'Donâ€™t remember your password?',
    createANewAcc: 'Create a new account',
    deriveAnAcc: 'Derive an account',
    exportThisAcc: 'Export this account',
    removeThisAcc: 'Remove this account',
    confirm: 'Confirm',
    copyToClipboard: 'Copy to clipboard',
    finish: 'Finish',
    remove: 'Remove',
    saveItSomeWhereSafe: 'I have kept it somewhere safe',
    importAccount: 'Import account',
    importByJsonFile: 'Import by JSON file',
    scanQrCode: 'Scan QR code',
    uploadFromPhotos: 'Upload from photos',
    connectLedgerDevice: 'Connect Ledger device',
    attachWatchOnlyAcc: 'Attach watch-only account',
    delete: 'Delete',
    creating: 'Creating',
    continue: 'Continue',
    viewAccOnExplorer: 'View account on explorer',
    buyNow: 'Buy now',
    transfer: 'Transfer',
    transferAll: 'Transfer all',
    cancel: 'Cancel',
    approve: 'Approve',
    send: 'Send',
    import: 'Import',
    next: 'Next',
    applyFilter: 'Apply filter',
    stake: 'Stake',
    resetSorting: 'Reset sorting',
    applyValidator: 'Apply {0} validator',
    applyValidators: 'Apply {0} validators',
    applyDApp: 'Apply {0} dApp',
    applyDApps: 'Apply {0} dApps',
    applyCollator: 'Apply {0} collator',
    applyCollators: 'Apply {0} collators',
    unstake: 'Unstake',
    stakeMore: 'Stake more',
    applyMasterPassword: 'Apply master password now',
    forgetThisAccount: 'Forget this account',
    seeMore: 'See more',
    withDrawUnstakedFunds: 'Withdraw unstaked funds',
    cancelUnstaking: 'Cancel unstaking',
    claimRewards: 'Claim rewards',
    save: 'Save',
    backToHome: 'Back to home',
    addNewProvider: 'Add a new provider',
    apply: 'Apply',
    createMasterPassword: 'Create master password',
    viewTransaction: 'View transaction',
    manageTokens: 'Manage tokens',
    unbond: 'Unstake',
    addContact: 'Add contact',
    enableNetwork: 'Enable network',
    newConnection: 'New connection',
    disconnect: 'Disconnect',
    applyAccounts: 'Apply {0} accounts',
    createOne: 'Create one',
    reload: 'Reload',
    unlockWithBiometric: 'Unlock with your biometric',
    enterMasterPassword: 'Enter master password',
    agree: 'Agree',
    startStaking: 'Start staking',
    addNft: 'Add NFT',
    addToken: 'Add token',
    addNetwork: 'Add network',
    iDontCare: "I don't care",
    joinNow: 'Join now',
    enable: 'Enable',
    rateSubwallet: 'Rate SubWallet',
    sendFeedback: 'Send feedback',
    notNow: 'Not now',
    update: 'Update',
    generalTermCheckbox:
      'I understand and agree to the Terms of Use, which apply to my use of SubWallet and all of its feature',
    scrollInstruction: 'Scroll to read all sections',
    iUnderStand: 'I understand',
    masterPasswordCheckbox: "I understand that SubWallet can't recover this password for me. ",
    learnMore: 'Learn more.',
    withdraw: 'Withdraw',
    cancelUnstake: 'Cancel unstake',
  },
  inputLabel: {
    selectAcc: 'Select account',
    selectToken: 'Select token',
    selectSupplier: 'Select supplier',
    sendFrom: 'Send from',
    sendTo: 'Send to',
    selectDestinationChain: 'Select destination chain',
    amount: 'Amount',
    estimateFee: 'Estimated fee',
    nftDetails: 'NFT details',
    description: 'Description',
    nftCollectionName: 'NFT collection name',
    ownedBy: 'Owned by',
    createdBy: 'Created by',
    network: 'Network',
    type: 'Type',
    contractAddress: 'Contract address',
    senderTransferableBalance: 'Sender transferable balance',
    nft: 'NFT',
    estimatedFee: 'Estimated fee',
    selectPool: 'Select pool',
    selectValidator: 'Select validator',
    estimatedEarnings: 'Estimated earnings',
    minimumActive: 'Minimum active',
    unstakingPeriod: 'Unstaking period',
    pool: 'Pool',
    status: 'Status',
    totalBonded: 'Total stake',
    totalMembers: 'Total members',
    availableBalance: 'Available balance',
    maxValidators: 'Max validators',
    totalNominators: 'Total nominators',
    validator: 'Validator',
    minStakeRequire: 'Min stake required',
    totalStake: 'Total stake',
    ownStake: 'Own stake',
    stakeFromOthers: 'Stake from others',
    estimatedApy: 'Estimated APY',
    commission: 'Commission',
    accountName: 'Account name',
    address: 'Address',
    account: 'Account',
    stakingType: 'Staking type',
    stakingStatus: 'Staking status',
    unclaimedRewards: 'Unclaimed rewards',
    totalStaked: 'Total staked',
    activeStaked: 'Active staked',
    unstaked: 'Unstaked',
    estimatedAnnualEarnings: 'Estimated annual earnings',
    withdrawInXDays: 'Withdraw in {0}',
    withdrawInADay: 'Withdraw in a day',
    availableForWithdraw: 'Available for withdraw',
    unstakeFromAcc: 'Unstake from account',
    selectCollator: 'Select collator',
    collator: 'Collator',
    selectAnUnstakeRequest: 'Select an unstake request',
    cancelUnstakeFee: 'Cancel unstake fee',
    waiting: 'Waiting',
    withdrawalReady: 'Withdrawal ready',
    rewardAmount: 'Reward amount',
    bondRewardAfterClaim: 'Stake reward after claim',
    availableRewards: 'Available rewards',
    tokenType: 'Token type',
    transactionType: 'Transaction type',
    sender: 'Sender',
    recipient: 'Recipient',
    transactionStatus: 'Transaction status',
    extrinsicHash: 'Extrinsic hash',
    transactionTime: 'Transaction time',
    networkFee: 'Network fee',
    originChainFee: 'Origin chain fee',
    fromAccount: 'From account',
    stakingAmount: 'Staking amount',
    unstakeAmount: 'Unstake amount',
    withdrawalAmount: 'Withdraw amount',
    unstakeAmountCancelled: 'Unstake amount cancelled',
    accountAddress: 'Account address',
    currentPassword: 'Current password',
    newPassword: 'New password',
    confirmNewPassword: 'Confirm new password',
    nominationStatus: 'Nomination status',
    pooledStatus: 'Pooled status',
    totalReward: 'Total reward',
    minimumStaked: 'Minimum staked',
    maxNomination: 'Max nomination',
    validators: 'Validators',
    withdrawFromAcc: 'Withdraw from account',
    senderNetwork: 'Sender network',
    destinationNetwork: 'Destination network',
    method: 'Method',
    arguments: 'Arguments',
    chainId: 'Chain id',
    from: 'From',
    to: 'To',
    hexData: 'Hex data',
    methodData: 'Method data',
    dApp: 'DApp',
    nftId: 'NFT ID',
    collectionId: 'Collection ID',
    name: 'Name',
    totalSupply: 'Total supply',
    totalWinner: 'Total winner',
    timeline: 'Time line',
    derivativeTokenBalance: 'Derivative token balance',
    nominationInfo: 'Nomination info',
    fastUnstake: 'Fast unstake',
  },
  message: {
    claimRewardMessage1: 'Your rewards will be bonded back into the pool after claiming',
    claimRewardMessage2: 'Your rewards will be added to your transferable balance after claiming',
    deleteNetworkMessage: 'You are about to delete this network',
    deleteTokenMessage: 'You are about to delete this token',
    deleteNftMessage: 'You are about to delete this NFT collection',
    unBondMessage: 'Once unbonded, your funds would be available for withdrawal after {0}.',
    commission: 'Commission: {0}%',
    apy: ' - APY: ',
    selectedXValidator: 'Selected {0} validator',
    bonded: 'Bonded: ',
    poolId: 'Pool #{0}',
    applyDoneTitle: 'Youâ€™re all done!',
    applyDoneMessage: 'You have successfully updated master password to all accounts',
    requestCreateMasterPassword:
      'Your master password is the password that allows access to multiple accounts. Once a master password is confirmed, you will not need to manually type your password with every transaction.',
    transactionDoneMessage: 'Your request has been sent. You can track its progress on the Transaction History page.',
    buyMessage: 'You will be directed to the chosen supplier to complete this transaction',
    changeMasterPasswordMessage1: 'To create a new password, you must correctly enter your current password.',
    changeMasterPasswordMessage2: 'Use this password to unlock your account.',
    forgotPasswordMessage:
      'We do not keep your password. If you forgot your password, you will need to reset your wallet using the Secret Recovery Phrase',
    cannotGetBalance: 'Can not get balance',
    enableTokenOnChain: 'Please enable {0} on {1}',
    disconnectModalMessage:
      'Once you disconnect, you will no longer see this connection on SubWallet and on your DApp.',
    connectedNetworks: '{0} network(s)',
    connectedNetworkConnected: '{0} networks connected',
    connectedAccounts: '{0} account connected',
    connectWalletConnectMessage: 'By clicking "Connect", you allow this dapp to view your public address',
    connectSuccessfully: 'Connection successful',
    supportedNetworks: 'Supported networks',
    networkSupported: '{0} networks supported',
    failToDisconnect: 'Fail to disconnect',
    unableToFetchInformation: 'Unable to fetch {0} information',
    unknownNetworks: '{0} unknown network',
    noticeForNewLoginMethod:
      'For easier password management, master password will be applied in place of PIN code in previous versions. You need to enter your master password to unlock SubWallet.',
    migrateMasterPasswordForBiometric:
      'For easier password management, master password will be applied in place of PIN code in previous versions. To keep using biometric authentication, please enter your master password and verify your biometric again.',
    xcmTransferWarningTitle: 'Pay attention!',
    xcmTransferWarningMessage:
      "You'll need to pay an additional fee for the destination network in a cross-chain transfer. This fee cannot be calculated in advance.",
    generalTermWarning:
      'Make sure to tick the checkbox "I understand and agree to the Terms of Use, which apply to my use of SubWallet and all of its feature" to be able to click Continue',
    masterPasswordWarning:
      'Make sure to tick the checkbox "I understand that SubWallet can\\\'t recover the password for me" to be able to click Continue',
  },
  header: {
    selectAccount: 'Select account',
    accountDetails: 'Account details',
    selectCollator: 'Select collator',
    exportAccount: 'Export account',
    yourSeedPhrase: 'Your seed phrase',
    yourRecoveryPhrase: 'Your recovery phrase',
    yourPrivateKey: 'Your private key',
    successful: 'Successful',
    yourQrCode: 'Your QR code',
    confirmation: 'Confirmation',
    createNewAcc: 'Create a new account',
    selectAccType: 'Select account type',
    importAcc: 'Import account',
    importFromSeedPhrase: 'Import from seed phrase',
    importFromJson: 'Import from Polkadot.{js}',
    accounts: 'Accounts',
    importByPrivateKey: 'Import by private key',
    importByQRCode: 'Import by QR code',
    scanQR: 'Scan QR code',
    attachAnAcc: 'Attach an account',
    connectLedgerDevice: 'Connect Ledger device',
    connectPolkadotVault: 'Connect Polkadot Vault',
    connectKeystoneDevice: 'Connect Keystone device',
    attachReadOnlyAcc: 'Attach watch-only account',
    removeThisAcc: 'Detele this account?',
    verifySeedPhrase: 'Verify seed phrase',
    createAPassword: 'Create a password',
    customizeAssetDisplay: 'Customize asset display',
    selectToken: 'Select token',
    yourAddress: 'Your address',
    buyToken: 'Buy token',
    transfer: 'Transfer',
    transferConfirmation: 'Transfer confirmation',
    yourCollections: 'Your collections',
    description: 'Description',
    importNft: 'Import NFT',
    transferNft: 'Transfer NFT',
    nftTransferConfirmation: 'NFT Transfer confirmation',
    crowdloans: 'Crowdloans',
    filter: 'Filter',
    staking: 'Staking',
    actions: 'Actions',
    addToBond: 'Start earning',
    networkDetails: 'Network details',
    selectPool: 'Select pool',
    poolDetails: 'Pool details',
    sorting: 'Sorting',
    selectValidator: 'Select validator',
    validatorDetails: 'Validator details',
    addToBondConfirm: 'Add to stake confirm',
    nominationDetails: 'Nomination details',
    unbond: 'Unstake',
    unbondConfirmation: 'Unstake confirm',
    cancelUnstake: 'Cancel unstake',
    cancelUnstakeConfirmation: 'Cancel unstake confirm',
    withDraw: 'Withdraw',
    withdrawalConfirm: 'Withdrawal confirm',
    claimRewards: 'Claim rewards',
    claimRewardsConfirmation: 'Claim rewards confirm',
    settings: 'Settings',
    generalSettings: 'General settings',
    walletTheme: 'Wallet theme',
    notificationType: 'Notification type',
    securitySettings: 'Security settings',
    changePassword: 'Change password',
    manageWebsiteAccess: 'Manage website access',
    websiteAccess: 'Website access',
    manageNetworks: 'Manage networks',
    importNetwork: 'Import network',
    manageTokens: 'Manage tokens',
    importToken: 'Import token',
    tokenDetails: 'Token details',
    connectWithSubwallet: 'Connect with SubWallet',
    signatureRequired: 'Signature required',
    messageDetails: 'Message details',
    signatureRequest: 'Signature request',
    connectSubwallet: 'Connect SubWallet',
    connectWebsite: 'Connect website',
    dAppConfiguration: 'Dapp configuration',
    accessConfiguration: 'Access configuration',
    history: 'History',
    sendToken: 'Send token',
    nftTransaction: 'NFT transaction',
    unstakeTransaction: 'Unstake transaction',
    withdrawStake: 'Withdraw stake',
    claimStakingReward: 'Claim staking reward',
    receiveToken: 'Receive token',
    selectNetwork: 'Select network',
    selectTokenType: 'Select token type',
    confirmTransfer: 'Confirm transfer',
    applyMasterPassword: 'Apply master password',
    unstakeRequest: 'Unstake request',
    addNetworkRequest: 'Add Network Request',
    addTokenRequest: 'Add Token Request',
    transactionRequest: 'Transaction Request',
    updateMetadata: 'Update Metadata',
    switchNetworkRequest: 'Switch Network Request',
    addNewProvider: 'Add a new provider',
    deleteNetwork: 'Delete network',
    deleteNft: 'Delete NFT',
    enterPassword: 'Enter password',
    providers: 'Providers',
    createMasterPassword: 'Create master password',
    deleteToken: 'Delete token',
    language: 'Language',
    manageAddressBook: 'Manage address book',
    addressBook: 'Address book',
    addContact: 'Add contact',
    editContact: 'Edit contact',
    search: 'Search',
    websiteAccessConfig: 'Website access config',
    currentPassword: 'Current password',
    newPassword: 'New password',
    walletConnect: 'WalletConnect',
    disconnect: 'Disconnect',
    connectedNetworks: 'Connected networks',
    missionPools: 'Mission Pools',
    updateChain: 'Update network',
    generalTermTitle: 'Terms of Use',
    earning: 'Earning',
    positionList: 'Your earning positions',
    groupList: 'Earning options',
    poolList: '{{symbol}} earning options',
    transactionConfirmation: 'Transaction confirm',
    mintVDOT: 'Mint vDOT',
    mintLDOT: 'Mint LDOT',
    mintSDOT: 'Mint sDOT',
    mintQDOT: 'Mint qDOT',
    mintSTDOT: 'Mint stDOT',
    mintVDOTTransaction: 'Mint vDOT transaction',
    mintLDOTTransaction: 'Mint LDOT transaction',
    mintSDOTTransaction: 'Mint sDOT transaction',
    mintQDOTTransaction: 'Mint qDOT transaction',
    mintSTDOTTransaction: 'Mint stDOT transaction',
    redeemVDOT: 'Redeem vDOT',
    redeemLDOT: 'Redeem LDOT',
    redeemSDOT: 'Redeem sDOT',
    redeemQDOT: 'Redeem qDOT',
    redeemSTDOT: 'Redeem stDOT',
    redeemVDOTTransaction: 'Redeem vDOT transaction',
    redeemLDOTTransaction: 'Redeem LDOT transaction',
    redeemSDOTTransaction: 'Redeem sDOT transaction',
    redeemQDOTTransaction: 'Redeem qDOT transaction',
    redeemSTDOTTransaction: 'Redeem stDOT transaction',
    unstakeVDOT: 'Unstake vDOT',
    unstakeLDOT: 'Unstake LDOT',
    unstakeSDOT: 'Unstake sDOT',
    unstakeSTDOT: 'Unstake stDOT',
    unstakeQDOT: 'Unstake qDOT',
    unstakeVDOTTransaction: 'Unstake vDOT transaction',
    unstakeLDOTTransaction: 'Unstake LDOT transaction',
    unstakeSDOTTransaction: 'Unstake sDOT transaction',
    unstakeSTDOTTransaction: 'Unstake stDOT transaction',
    unstakeQDOTTransaction: 'Unstake qDOT transaction',
    tokenApprove: 'Token approve',
    tokenApproveTransaction: 'Token approve transaction',
    stake: 'Stake',
    unstake: 'Unstake',
    withdraw: 'Withdraw',
    supply: 'Supply',
  },
  nftScreen: {
    nftAppearHere: 'Your NFTs will appear here',
    dontSeeNft: "Don't see your NFTs?",
    importNft: 'Import NFTs',
    nftDetail: {
      description: 'Description',
      rarity: 'Rarity',
      properties: 'Properties',
      resourcesOrInventory: 'Resources or inventory',
      collectionName: 'Collection name',
      ownedBy: 'Owned by',
      createdBy: 'Created by',
    },
  },
  historyScreen: {
    extrinsicType: {
      transfer: 'Transfer',
      nft: 'NFT',
      crowdloan: 'Crowdloan',
      stake: 'Stake',
      unstake: 'Unstake',
      bond: 'Bond',
      unbond: 'Unbond',
      claimReward: 'Claim reward',
      withdraw: 'Withdraw',
      cancelUnstake: 'Cancel unstake',
      compounding: 'Compounding',
      evmExecute: 'EVM Execute',
    },
    extrinsicStatus: {
      completed: 'Completed',
      failed: 'Failed',
      queued: 'Queued',
      submitting: 'Submitting',
      processing: 'Processing',
      cancelled: 'Cancelled',
      unknown: 'Unknown',
    },
    label: {
      transactionType: 'Transaction type',
      network: 'Network',
      transactionStatus: 'Transaction status',
      extrinsicHash: 'Extrinsic Hash',
      transactionTime: 'Transaction time',
      amount: 'Amount',
      collectionName: 'Collection Name',
      stakingType: 'Staking type',
      stakingValue: 'Staking value',
      withdrawValue: 'Withdraw value',
      unstakeValue: 'Unstake value',
      cancelUnstakeValue: 'Cancel unstake value',
      contributeBalance: 'Contribute balance',
      networkFee: 'Network fee',
      originChainFee: 'Origin Chain fee',
      destinationFee: 'Destination fee',
      fromAccount: 'From account',
    },
    title: {
      transaction: 'Transaction',
      sendTransaction: 'Send transaction',
      receiveTransaction: 'Receive transaction',
      nftTransaction: 'NFT transaction',
      crowdloanTransaction: 'Crowdloan transaction',
      stakeTransaction: 'Stake transaction',
      unstakeTransaction: 'Unstake transaction',
      bondTransaction: 'Bond transaction',
      unbondTransaction: 'Unbond transaction',
      claimRewardTransaction: 'Claim Reward transaction',
      withdrawTransaction: 'Withdraw transaction',
      cancelUnstakeTransaction: 'Cancel unstake transaction',
      evmTransaction: 'EVM Transaction',
    },
  },
  importEvmNft: {
    smartContract: 'NFT contract address',
    chain: 'Chain',
    nftCollectionName: 'NFT collection name',
    nftType: 'NFT type',
    cancel: 'Cancel',
    importNft: 'Import NFT',
  },
  importToken: {
    contractAddress: 'Contract address',
    tokenName: 'Token name',
    chain: 'Chain',
  },
  sendAssetScreen: {
    originChain: 'Origin chain',
    destinationChain: 'Destination chain',
    fromAccount: 'From account',
    toAccount: 'To account',
    originChainFee: 'Origin chain fee',
    total: 'Total',
    amountGtAvailableBalanceMessage: 'The amount you want to transfer is greater than your available balance.',
    onChain: 'On-chain',
    crossChain: 'Cross-chain',
    transactionSuccessful: 'Transaction successful',
    transactionFail: 'Transaction fail',
    success: 'Success!',
    fail: 'Fail!',
  },
  transferNft: {
    send: 'Send',
    nft: 'NFT',
    chain: 'Chain',
    signAndSubmit: 'Sign and submit',
    success: {
      title: 'Success!',
      subText: 'Your transfer request has been confirmed. It might take a minute to see changes in your wallet.',
    },
    fail: {
      title: 'Fail!',
      subText: 'There was a problem with your request. You can try again.',
    },
  },
  crowdloanScreen: {
    filter: {
      polkadotChain: 'Polkadot relay chain',
      kusamaChain: 'Kusama relay chain',
      win: 'Win',
      fail: 'Fail',
    },
  },
  stakingScreen: {
    startStaking: 'Start staking',
    balanceList: {
      stakingAppearHere: 'Your staking accounts will be appear here',
      nominatedBalance: 'Nominated balance',
      pooledBalance: 'Pooled balance',
    },
    stakingDetail: {
      activeStake: 'Active stake',
      unlockingStake: 'Unlocking stake',
      totalReward: 'Total reward',
      latestReward: 'Latest reward',
      totalSlash: 'Total slash',
      unStakeFunds: 'Unstake funds',
      stakingType: 'Staking type',
      unclaimedReward: 'Unclaimed Reward',
      actions: {
        stake: 'Stake more',
        unStake: 'Unstake funds',
        withdraw: 'Withdraw',
        claim: 'Claim rewards',
        compound: 'Compound stake',
        more: 'More',
      },
    },
    networkList: {
      validators: 'validators',
      searchNetwork: 'Search network...',
      chainAppearHere: 'Your chain will appear here',
      noChainAvailable: 'No network available',
    },
    validatorList: {
      searchValidator: 'Search validator...',
      searchCollator: 'Search collator...',
      searchDApp: 'Search dApp...',
      totalStake: 'Total stake',
      minStake: 'Min stake',
      lowestCommission: 'Lowest commission',
      highestReturn: 'Highest return',
      validatorAppearHere: 'Your validator will appear here',
      noValidatorAvailable: 'No validator available',
      collatorAppearHere: 'Your collator will appear here',
      noCollatorAvailable: 'No collator available',
      dAppAppearHere: 'Your dApp will appear here',
      noDAppAvailable: 'No dApp available',
    },
    validatorDetail: {
      totalStake: 'Total stake',
      expected: 'Expected',
      ownStake: 'Own stake',
      nominatorsCount: 'Nominators count',
      minimumStake: 'Minimum stake',
      commission: 'Commission',
    },
  },
  stakeAction: {
    stakingAmount: 'Staking amount',
    stakingFee: 'Staking fee',
    total: 'Total',
    success: {
      title: 'Staked successfully',
      subText: 'Your staking request has been confirmed. It might take a minute to see changes in your wallet.',
    },
    fail: {
      title: 'Staking failed',
      subText: 'There was a problem with your request. You can try again.',
    },
  },
  unStakeAction: {
    collator: 'Collator',
    unStakingAmount: 'Unstaking amount',
    unStakingFee: 'Unstaking fee',
    total: 'Total',
    success: {
      title: 'Unstake successfully',
      subText: 'Your unstaking request has been confirmed. It might take a minute to see changes in your wallet.',
    },
    fail: {
      title: 'Unstaking failed',
      subText: 'There was a problem with your request. You can try again.',
    },
  },
  withdrawStakeAction: {
    validator: 'Validator',
    withdrawAmount: 'Withdraw amount',
    withdrawFee: 'Withdraw fee',
    total: 'Total',
    success: {
      title: 'Withdraw successfully',
      subText: 'Your withdrawal request has been confirmed. It might take a minute to see changes in your wallet.',
    },
    fail: {
      title: 'Withdrawal failed',
      subText: 'There was a problem with your request. You can try again.',
    },
  },
  claimStakeAction: {
    claimFee: 'Claim fee',
    total: 'Total',
    success: {
      title: 'Claim reward successfully',
      subText: 'Your claiming request has been confirmed. It might take a minute to see changes in your wallet.',
    },
    fail: {
      title: 'Reward claiming failed',
      subText: 'There was a problem with your request. You can try again.',
    },
  },
  compoundStakeAction: {
    taskId: 'Task ID',
    compoundingThreshold: 'Compounding threshold',
    optimalCompoundingTime: 'Optimal compounding time',
    total: 'Total',
    transactionFee: 'Transaction fee',
    compoundingStartIn: 'Compounding starts in',
    compoundingFee: 'Compounding fee',
    compound: {
      success: {
        title: 'Request executed successfully',
        subText: 'Your compounding request has been confirmed. It might take a minute to see changes in your wallet.',
      },
      fail: {
        title: 'Compounding request failed',
        subText: 'There was a problem with your request. You can try again.',
      },
    },
    cancelCompound: {
      success: {
        title: 'Request executed successfully',
        subText: 'Your compounding request has been cancelled. It might take a minute to see changes in your wallet.',
      },
      fail: {
        title: 'Request cancellation failed',
        subText: 'There was a problem with your request. You can try again.',
      },
    },
  },
  confirmation: {
    signatureRequest: 'Signature request',
    approveRequest: 'Approve request',
    requestWithAccount: 'You are approving a request with account',
    messageDetail: 'Message details',
    transactionDetail: 'Transaction details',
    lifeTimeContent: 'mortal, valid from {{birth}} to {{death}}',
    addNetworkRequest: 'Add network request',
    addTokenRequest: 'Add token request',
    providerUrl: 'Provider URL',
    chainId: 'Chain ID',
    chainType: 'Chain type',
    blockExplorer: 'Block explorer',
    crowdloanURL: 'Crowdloan URL',
    immortal: 'immortal',
    fromAccount: 'From account',
    toAccount: 'To account',
    toContract: 'To contract',
    tokenType: 'Token type',
    contractAddress: 'Contract address',
  },
  signingAction: {
    basic: 'Basic',
    detail: 'Detail',
    signature: 'Signature',
    message: 'Message',
    to: 'To',
    data: 'Data',
    nonce: 'Nonce',
    value: 'Value',
    gas: 'Gas',
    gasPrice: 'Gas price',
    method: 'Method',
    phase: 'Phase',
    period: 'Period',
    tip: 'Tip',
    era: 'Era',
    approveRequestThisAcc: 'Approve request this account?',
  },
  settings: {
    notifications: 'Notifications',
    network: 'Network',
    manageTokens: 'Manage tokens',
    tokens: 'Tokens',
    telegram: 'Telegram',
    twitter: 'Twitter',
    discord: 'Discord',
    website: 'Website',
    documentation: 'Documentation',
    termOfService: 'Terms of service',
    privacyPolicy: 'Privacy policy',
    webViewDebugger: 'Web view debugger',
    lock: 'Lock',
    exportPrivateKey: 'Export private key',
    immediately: 'Immediately',
    ifLeftFor15Seconds: 'If left for 15 seconds',
    ifLeftFor30Seconds: 'If left for 30 seconds',
    ifLeftFor1Minute: 'If left for 1 minute',
    ifLeftFor5Minutes: 'If left for 5 minutes',
    ifLeftFor15Minutes: 'If left for 15 minutes',
    ifLeftFor30Minutes: 'If left for 30 minutes',
    ifLeftFor1Hour: 'If left for 1 hour',
    whenCloseApp: 'When close app',
    networkAndAssets: 'Network & assets',
    communityAndSupport: 'Community & support',
    about: 'About',
  },
  emptyScreen: {
    tokenEmptyTitle: 'No tokens found',
    tokenEmptyMessage: 'Try adding one manually',
    tokenEmptyMessageV2: 'Try searching or importing one',
    nftEmptyTitle: 'No NFTs found',
    nftEmptyMessage: 'Try adding one manually',
    crowdloanEmptyTitle: 'No crowdloans found',
    crowdloanEmptyMessage: 'Your crowdloans will show up here',
    stakingEmptyTitle: 'No staking found',
    stakingEmptyMessage: 'You can stake in-app easily',
    historyEmptyTitle: 'No transactions found',
    historyEmptyMessage: 'Your transactions will show up here',
    selectorEmptyTitle: 'No results found',
    selectorEmptyMessage: 'Change your search criteria and try again',
    networkSettingsTitle: 'No network found',
    networkSettingsMessage: 'Your network will appear here.',
    browserEmptyTitle: 'Recent search empty list',
    browserEmptyMessage: 'You have not searched any website before',
    manageDAppDetailEmptyTitle: 'No accounts connected',
    manageDAppDetailEmptyMessage: 'Your list of connected accounts will appear here.',
    manageDAppEmptyTitle: 'No dApps found',
    manageDAppEmptyMessage: 'Your dApps will show up here',
    categoryItemEmpty: 'This category is empty',
    walletConnectDetailEmptyTitle: 'No dApps found',
    walletConnectEmptyDetailMessage: 'Your dApps will show up here',
    missionPoolsEmptyTitle: 'No mission found',
    missionPoolsEmptyMessage: 'Your missions will show up here',
  },
  warningTitle: {
    doNotSharePrivateKey: 'Do not share your private key!',
    whatIfLoseRecoveryPhrase: 'What if I lose the recovery phrase?',
    doNotShareJsonFile: 'Do not share your JSON file!',
    warning: 'Warning',
    error: 'Error!',
    clearHistory: 'Clear history',
    expiredConnectionTitle: 'Connection expired',
    unsupportedNetworkTitle: 'Unsupported network',
  },
  warningMessage: {
    passwordTooShort: 'Password is too short',
    noTokenAvailable: 'No token available',
    noNetworkAvailable: 'No network available',
    noServiceAvailable: 'No service available',
    noAccountText: "You currently don't have any accounts. Create your first account to get started.",
    privateKeyWarning: 'If someone has your private key they will have full control of your account',
    secretPhraseWarning:
      'There is no way to get back your recovery phrase if you lose it. Make sure you store them at someplace safe which is accessible only to you.',
    unableDecode: 'Unable to decode using the supplied passphrase',
    invalidJsonFile: 'Invalid Json file',
    noPasswordMessage: 'Please fill repeat password',
    doNotMatchPasswordWarning: 'Passwords do not match',
    isNotSameAddress: 'The recipient address is the same as the sender address.',
    recipientPhish: 'The recipient is associated with a known phishing site on',
    isNotSameAddressAndTokenType: 'Transfer is not supported for this type of account and token',
    recipientAddressMustBe: 'The recipient address must be ',
    originAccountMustBe: 'Origin account must be ',
    destinationAccountMustBe: 'Destination account must be ',
    invalidEVMPrivateKey: 'Invalid EVM private key',
    removeAccountWarning:
      'You are about to remove this account. This means that you will not able to access it via this application any more. If you wish to recover it, you will need to use the secret phrase.',
    initSecretPhrase:
      'Keep your recovery phrase in a safe place, and never disclose it. Anyone with this phrase can take control of your assets.',
    exportAccountWarning: "You are exporting your account. Keep it safe and don't share it with anyone.",
    noAccountMessage: "There's no account at the moment",
    requireMessage: 'This field is required',
    notSupportTransferMessage: 'The transfer for the current token is not supported',
    noEvmAccountMessage: "You don't have any evm account. Please create, import or restore an account to continue",
    noSubstrateAccountMessage:
      "You don't have any substrate account. Please create, import or restore an account to continue",
    trustSiteMessage: 'Make sure you trust this site before connecting',
    ethSignWarningMessage:
      "Signing this message can be dangerous. This signature could potentially perform any operation on your account's behalf, including granting complete control of your account and all of its assets to the requesting site. Only sign this message if you know what you're doing or completely trust the requesting site.",
    clearHistoryWarningMessage: 'Make sure you want to clear all history',
    phishingMessage:
      'This site is blocked because the Subwallet app believes that this website could compromise the security of your accounts and your tokens.',
    notEnoughToStake: 'Your free balance is not enough to stake',
    stakeAtLeast: 'You must stake at least',
    balanceTooLow: 'Your balance is too low to cover fees',
    withdrawUnStakingFirst: 'Please withdraw the unstaking amount first',
    freeBalanceAtLeast: 'Your free balance needs to be at least',
    chooseNominating: 'Please choose among the nominating validators only',
    amountGtZero: 'Amount must be greater than 0',
    thresholdLagerThan: 'The threshold must be larger than',
    unStakeEverything: 'You can only unstake everything',
    unStakeEverythingOrMaxOf: 'You can unstake everything or a maximum of',
    unStakeMaxOf: 'You can unstake a maximum of',
    invalidPrefix: 'Invalid prefix received, expected',
    invalidQRCode: 'Invalid QR code',
    cannotExtractAddress: "Can't extract address from the QR code",
    enableAtLeast1Network: 'Please enable at least 1 network',
    readOnly: 'You are using watch-only account',
    sendReadOnly: 'The account you are using is watch-only, you cannot send assets with it.',
    validatorMaxLimit: 'The validator is not looking for more nominations',
    noInternetMessage: 'No internet connection. Please try again later',
    webRunnerDeadMessage: "We've run into an issue. Please try again later or restart the application",
    unSupportSigning: 'This feature is not available for the chosen account',
    networkUnSupportQrSigner: 'This network does not support this feature with QR-signer account',
    featureIsNotAvailable: 'This feature is not available for the chosen account',
    enableNetworkToContinue: 'Please enable the network to continue.',
    tokenExists: 'The token already exists.',
    expiredConnectionMessage: 'Connection expired. Please create a new connection from dApp',
    unsupportedNetworkMessage: 'There is at least 1 chosen network unavailable',
  },
  addressBook: {
    typeWallet: 'Your Wallet',
    typeContact: 'Saved contacts',
    typeRecent: 'Recent',
    contactName: 'Contact name',
    contactAddress: 'Contact address',
  },
  errorMessage: {
    invalidPinCode: 'Invalid PIN Code',
    wrongPassword: 'Wrong password',
    invalidMnemonicSeed: 'Invalid mnemonic seed',
    invalidAddress: 'Invalid address',
    scanAgain: "Sorry, we've run into a problem.\nPlease scan again",
    occurredError: 'An error has occurred. Please try again later',
    invalidEvmContractAddress: 'Invalid EVM contract address',
    tokenAlreadyAdded: 'This token has already been added',
    invalidContractForSelectedChain: 'Invalid contract for the selected chain',
    unknownError: 'Encountered an error, please try again.',
    networkHasBeenAlreadyAdded: 'This network has already been added',
    providerHasExisted: 'This provider has existed',
    providerIsNotTheSameNetwork: 'This provider is not the same network',
    unableToConnectToTheProvider: 'Unable to connect to the provider',
    providerRequirePrefix: 'Provider URL requires http/https or wss prefix',
    successfullyAddANewCustomProvider: 'Successfully added a new custom provider',
    errorConfigureNetwork: 'Error trying to configure network',
    noProviderAvailable: 'No provider available',
    transferNFTBalanceError: 'Your balance is too low to cover fees',
    transferNFTTxError: 'Encountered an error, please try again.',
    transferNFTError: 'Some error occurred. Please try again later.',
    noTokenAvailable: 'No token available',
    qrCodeNotSupport:
      'QR code not supported, please make sure you are scanning a transaction from a supported software.',
    noNetwork: 'Dfinn Wallet does not currently recognize a chain with genesis hash, please add the network first',
    noRawData: 'There is no raw data from the request',
    noSenderFound: 'There is no related account in the app',
    externalAccount: 'There is external account',
    framesToBig: 'Frames number is too big, the QR seems not to be a recognized extrinsic raw data',
    networkDisconected: 'is disconnected',
    invalidMasterPassword: 'Invalid master password',
    validateProviderError: 'Error validating this provider',
    cannotConnectToThisProvider: 'Cannot connect to this provider',
    thisChainHasAlreadyBeenAdded: 'This chain has already been added',
    invalidProviderUrl: 'Provider URL is not valid',
    recipientAddressIsRequired: 'Recipient address is required',
    invalidRecipientAddress: 'Invalid recipient address',
    sameAddressError: 'The recipient address can not be the same as the sender address',
    notSameAddressTypeError: 'The recipient address must be same type as the current account address',
    recipientAddressMustBeType: (type: string) => `The recipient address must be ${type} type`,
    amountRequiredError: 'Amount is required',
    amountMustBeGreaterThanZero: 'Amount must be greater than 0',
    amountMustBeEqualOrLessThan: (maxString: string) => `Amount must be equal or less than ${maxString}`,
    unbondMustBeEqualOrLessThan: (maxString: string, name?: string) =>
      `${name || 'Value'} must be equal or lesser than ${maxString}`,
    unbondMustBeGreaterThanZero: (name?: string) => `${name || 'Value'} must be greater than 0`,
    unbondMustBeEqual: (maxString: string, name?: string) => `${name || 'Value'} must be equal ${maxString}`,
    unbondInvalidAmount: 'Invalid. If you unstake this amount your staking would fall below minimum stake required',
    crowdloanUrlMustBeAValidUrl: 'Crowdloan URL must be a valid URL',
    blockExplorerMustBeAValidUrl: 'Block explorer must be a valid URL',
    invalidAmount: 'Amount is invalid',
    isNotAnAddress: 'Invalid. The photo does not contain an address',
    isNotContractAddress: 'Invalid. The photo does not contain an contract address',
    contactAddressIsRequired: 'Contact address is required',
    invalidContactAddress: 'Invalid contact address',
    contactNameIsRequired: 'Contact name is required',
    contactNameMustBeUnique: 'Contact name must be unique',
    invalidPassword: 'Invalid password',
    connectionAlreadyExist: 'Connection already exists',
    failToAddConnection: 'Fail to add connection',
    unreadableQrCode: 'Unreadable QR code. Please scan another one.',
  },
};
